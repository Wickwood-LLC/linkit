<?php
/**
 * @file
 * Tests for Linkit module.
 */

/**
 * Abstract class for Linkit testing.
 */
abstract class LinkitTestCase extends SimpleTestCloneTestCase {
//abstract class LinkitTestCase extends DrupalWebTestCase {

  /**
   * Permissions to apply to administers.
   *
   * @var array
   */
  public $admin_permissions = array(
    'administer linkit',
  );

  /**
   * A user object.
   *
   * @var object
   */
  public $account;

  /**
   * A Linkit profile object.
   *
   * @var LinkitProfile object
   */
  public $_profile;

  function setUp() {
    parent::setUp('ctools', 'entity', 'linkit');
  }

  /**
   * Helper function: Create a Linkit profile.
   */
  protected function createProfile($extra = array()) {
    ctools_include('export');
    $profile = ctools_export_crud_new('linkit_profiles');

    $profile->name = isset($extra['name']) ? $extra['name'] : 'test_profile';
    $profile->admin_title = isset($extra['admin_title']) ? $extra['admin_title'] : 'Test Profile';
    $profile->admin_description = isset($extra['admin_description']) ? $extra['admin_description'] : 'This is a description for the Test Profile.';
    $profile->data = array();

    if (isset($extra['data'])) {
      $profile->data += $extra['data'];
    }

    if (!isset($profile->data['insert_plugin'])) {
      $profile->data['insert_plugin'] = array(
        'plugin' => 'raw_url',
        'url_method' => LINKIT_URL_METHOD_ADD_SLASH,
      );
    }

    // Save the profile.
    ctools_export_crud_save('linkit_profiles', $profile);

    // Load and return the saved profile.
    $this->_profile = linkit_profile_load($profile->name);
  }

  /**
   * Helper function: Update a Linkit profile.
   */
  protected function updateProfile() {
    ctools_include('export');

    // Save the changes to the profile.
    ctools_export_crud_save('linkit_profiles', $this->_profile);

    // Load the saved profile.
    $this->_profile = linkit_profile_load($this->_profile->name);
  }
}

/**
 * Tests Linkit profile UI CRUD.
 */
class LinkitProfileUICRUDTestCase extends LinkitTestCase {

  /**
   * Default profile values.
   */
  protected $profile_defaults = array(
     'name' => 'test_profile',
     'admin_title' => 'Test Profile',
     'admin_description' => 'This is a description for the Test Profile.',
     'data[insert_plugin][plugin]' => 'raw_url',
   );

  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Linkit Profile UI CRUD',
      'description' => 'Test that a Linkit profile can be created/read/updated/deleted.',
      'group' => 'Linkit'
    );
  }

  function setUp() {
    parent::setUp();
    $this->account = $this->drupalCreateUser($this->admin_permissions);
    $this->drupalLogin($this->account);
  }

  /**
   * Create a profile.
   */
  public function testCreateProfileUI() {
    // Save the profile.
    $this->drupalPost('admin/config/content/linkit/add', $this->profile_defaults, t('Save'));

    $this->assertRaw(t('!title has been created.', array('!title' => $this->profile_defaults['name'])), 'The new profile was created.');

    // Go to the edit page.
    $this->drupalGet('admin/config/content/linkit/list/' . $this->profile_defaults['name'] . '/edit');
    $this->assertResponse(200);

     // Test that the given values are saved.
    foreach ($this->profile_defaults as $form_key => $value) {
      $this->assertFieldByName($form_key, $value);
    }
  }

  /**
   * Read a profile.
   */
  public function testReadProfileUI() {
    // Create a profile.
    $this->createProfile();

    // Go to the edit page.
    $this->drupalGet('admin/config/content/linkit/list/' . $this->_profile->name . '/edit');
    $this->assertResponse(200);

     // Test that the given values are saved.
    foreach ($this->profile_defaults as $form_key => $value) {
      $this->assertFieldByName($form_key, $value);
    }
  }

  /**
   * Update a profile.
   */
  public function testUpdateProfileUI() {
    // Create a profile.
    $this->createProfile(array(
      'data' => array(
        'autocomplete' => array(
          'charLimit' => 3,
          'wait' => 350,
          'remoteTimeout' => 10000,
        ),
      ),
    ));

    // Go to the edit page.
    $this->drupalGet('admin/config/content/linkit/list/' . $this->_profile->name . '/edit');
    $this->assertResponse(200);

    $profile_update = array(
      'admin_title' => 'Test Profile updated',
      'admin_description' => 'This is a updated description for the Test Profile updated.',
      'data[insert_plugin][plugin]' => 'html_link',
      'data[autocomplete][charLimit]' => 4,
      'data[autocomplete][wait]' => 3500,
      'data[autocomplete][remoteTimeout]' => 1000,
    );
    // Set some new values for the profile.
    $this->drupalPost(NULL, $profile_update, t('Save'));

    // Go to the edit page again.
    $this->drupalGet('admin/config/content/linkit/list/' . $this->_profile->name . '/edit');
    $this->assertResponse(200);

    // Test that the given values are saved.
    foreach ($profile_update as $form_key => $value) {
      $this->assertFieldByName($form_key, $value);
    }
  }

  /**
   * Delete a profile.
   */
  public function testDeleteProfileUI() {
    // Create a profile that we will delete.
    $this->createProfile();

    // Delete the created profile.
    $this->drupalPost('/admin/config/content/linkit/list/' . $this->_profile->name . '/delete', array(), t('Delete'));

    $this->assertRaw(t('The item has been deleted.'), 'The profile was deleted.');
  }
}

/**
 * Test the linkit_profile_load() function.
 */
class LinkitProfileLoadTestCase extends LinkitTestCase {

  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Linkit Profile Load',
      'description' => 'Test the linkit_profile_load() function.',
      'group' => 'Linkit'
    );
  }

  function setUp() {
    parent::setUp();
  }

  /**
   * Load a profile that doesn't exists.
   */
  public function testLoadNonExistingProfile() {
    // Load a profile that doesn't exists.
    $loaded_profile = linkit_profile_load('my_none_existing_profile');

    $this->assertFalse($loaded_profile, 'FALSE is returned when loading a non existing profile.');
  }

  /**
   * Load a profile that exists.
   */
  public function testLoadProfile() {
    // Create an user account so we can create a profile.
    $this->account = $this->drupalCreateUser($this->admin_permissions);
    $this->drupalLogin($this->account);

    // Create a profile that we will load.
    $this->createProfile();

    // Load the saved profile.
    $loaded_profile = linkit_profile_load($this->_profile->name);

    $this->assertTrue($loaded_profile, 'Profile was successfully loaded.');
  }
}

/**
 * Test the linkit_profile_load_all() function.
 */
class LinkitProfileLoadAllTestCase extends LinkitTestCase {

  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Linkit Profile Load All',
      'description' => 'Test the linkit_profile_load_all() function.',
      'group' => 'Linkit'
    );
  }

  function setUp() {
    parent::setUp();
  }

   /**
   * Load all profiles when no profiles exists.
   */
  public function testLoadProfilesNoProfilesExists() {
    // Load all profiles.
    $loaded_profile = linkit_profile_load_all();
    $this->assertIdentical($loaded_profile, array(), 'Empty array is returned when loading all profiles and there are no profiles.');
  }

  /**
   * Load all profiles.
   */
  public function testLoadAllProfiles() {
    // Create an user account so we can create profiles.
    $this->account = $this->drupalCreateUser($this->admin_permissions);
    $this->drupalLogin($this->account);

    // Create profiles that we will load.
    $this->createProfile(array('name' => 'test_1'));
    $this->createProfile(array('name' => 'test_2'));
    $this->createProfile(array('name' => 'test_3'));

    // We have to clear the static variables here as we have in the
    // testLoadProfilesNoProfilesExists test function asked for profiles where
    // there were no profiles.
    drupal_static_reset('ctools_export_load_object');
    drupal_static_reset('ctools_export_load_object_all');

    // Load all profiles.
    $loaded_profiles = linkit_profile_load_all();
    $this->assertEqual(count($loaded_profiles), 3, 'All profile were successfully loaded.');
  }
}

/**
 * Test the the node search plugin.
 */
class LinkitSerachPluginNodeTestCase extends LinkitTestCase {

  /**
   * The string to search for.
   *
   * @var string
   */
  protected $search_string = 'Lorem';

  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Linkit Search plugin (Node)',
      'description' => 'Test the the node search plugin.',
      'group' => 'Linkit'
    );
  }

  function setUp() {
    parent::setUp();

    // Create a basic profile.
    $this->_profile = $this->createProfile(array(
      'data' => array(
        'search_plugins' => array(
          'entity:node' => array(
            'enabled' => 1,
            'weight' => 0,
          ),
        ),
        'entity:node' => array(
          'result_description' => '',
          'bundles' => array(),
          'group_by_bundle' => 0,
          'include_unpublished' => 0,
        ),
      )
    ));

    $this->drupalCreateNode(array('type' => 'article', 'title' => 'Lorem article'));
    $this->drupalCreateNode(array('type' => 'page', 'title' => 'Lorem page'));
    $this->drupalCreateNode(array('type' => 'page', 'title' => 'Ipsum Lorem Ipsum', 'status' => NODE_NOT_PUBLISHED));
  }

  /**
   * Helper method to process the autocomplete call.
   */
  private function _autocompleteCall() {
    // Call the autocomplete.
    $path = 'linkit/autocomplete/' . $this->_profile->name;
    $response = $this->drupalGetAJAX($path, array('query' => array(LINKIT_BAC_QUERY_KEY => $this->search_string)));

    $this->assertNotNull($response, 'The JSON respone is seems to be ok.');
    return $response;
  }

  /**
   * Test that we get results back which is valid.
   */
  public function testBasicResults() {
    // Call the autocomplete helper method.
    $this->_autocompleteCall();

    // Check that the published node titles appears in the response.
    $this->assertRaw('Lorem article', 'First node title was found in the results.');
    $this->assertRaw('Lorem page', 'Second node title was found in the results.');
  }

  /**
   * Test how node states are handled.
   */
  public function testUnpublishedItems() {
    // Call the autocomplete helper method.
    $this->_autocompleteCall();

    // Check that the unpublished node title doesn't appear in the response.
    $this->assertNoRaw('Ipsum Lorem Ipsum', 'Unpublished node title was not found in the results.');

    $this->assert('debug', 'Try include unpublished nodes.', 'Debug');
    // Tell the profile to include unpublished nodes.
    $this->_profile->data['entity:node']['include_unpublished'] = 1;
    $this->updateProfile();

    // In order to see unpublished nodes in the result, the user must also have
    // permission to see unpublished nodes.
    // We give the user 'bypass node access' permission as we don't crated the
    // nodes with this user.
    $this->account = $this->drupalCreateUser(array('bypass node access'));
    $this->drupalLogin($this->account);

    // Call the autocomplete helper method.
    $this->_autocompleteCall();

    // Assert that the unpublished title appears in the response.
    $this->assertRaw('Ipsum Lorem Ipsum', 'Unpublished node title was found in the results.');
    // Assert that the class 'unpublished-node' appears in the response.
    $this->assertRaw('unpublished-node', 'The class "unpublished-node" was found in the results.');
  }
}
