<?php

/**
 * @file
 *
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StreamWrapper\StreamWrapperInterface;
use Drupal\Core\Url;
use Drupal\linkit\ProfileInterface;

/**
 * Implements hook_help().
 */
function linkit_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.linkit_profile.attributes':
      return '<p>' . t('Attributes are HTML attributes that will be attached to the insert plugin.') . '</p>';
      break;
  }
}

/**
 * Implements hook_ckeditor_plugin_info_alter().
 */
function linkit_ckeditor_plugin_info_alter(array &$plugins) {
  if (isset($plugins['drupallink'])) {
    $plugins['drupallink']['class'] = "Drupal\\linkit\\Plugin\\CKEditorPlugin\\LinkitDrupalLink";
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for editor_link_dialog.
 */
function linkit_form_editor_link_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user_input = $form_state->getUserInput();
  /** @var Drupal\filter\Entity\FilterFormat  $filter_format */
  $filter_format = $form_state->getBuildInfo()['args'][0];
  $input = isset($user_input['editor_object']) ? $user_input['editor_object'] : [];

  /** @var \Drupal\Core\Entity\EntityStorageInterface $editorStorage */
  $editorStorage = Drupal::service('entity.manager')->getStorage('editor');

  /** @var \Drupal\editor\EditorInterface $editor */
  $editor = $editorStorage->load($filter_format->id());
  $linkit_profile_id = $editor->getSettings()['plugins']['drupallink']['linkit_profile'];
  
  // Everything under the "attributes" key is merged directly into the
  // generated link tag's attributes.
  $form['attributes']['href'] = [
    '#title' => t('Link'),
    '#type' => 'linkit',
    '#default_value' => isset($input['href']) ? $input['href'] : '',
    '#description' => t('Start typing to find content or paste a URL.'),
    '#autocomplete_route_name' => 'linkit.autocomplete',
    '#autocomplete_route_parameters' => [
      'linkit_profile_id' => $linkit_profile_id
    ],
    '#weight' => 0,
  ];
  // Add #submit callback that generates data-entity-type and data-entity-uuid
  // attributes from the href attribute when appropriate.
  array_unshift($form['#submit'], 'linkit_form_editor_link_dialog_submit');
}

/**
 * Generates data-entity-type and data-entity-uuid attributes from href.
 */
function linkit_form_editor_link_dialog_submit(array &$form, FormStateInterface $form_state) {
  // Check if the 'href' attribute contains a entity: URI.
  $href = $form_state->getValue(['attributes', 'href']);
  $uri_parts = parse_url($href);
  if ($uri_parts['scheme'] !== 'entity') {
    return;
  }

  // Parse the entity: URI into an entity type ID and entity ID.
  list($entity_type_id, $entity_id) = explode('/', $uri_parts['path'], 2);

  // Load the entity and populate the data-entity-type and data-entity-uuid
  // attributes as expected by filters.
  // @see \Drupal\editor\Plugin\Filter\EditorFileReference
  // @see \Drupal\linkit\Plugin\Filter\LinkitFilter
  $entity = entity_load($entity_type_id, $entity_id);
  $form_state->setValue(['attributes', 'data-entity-type'], $entity_type_id);
  $form_state->setValue(['attributes', 'data-entity-uuid'], $entity->uuid());
}


/**
 * Implements hook_form_BASE_FORM_ID_alter() for linkit_profile_form on behalf
 * of the 'imce' module.
 *
 * Adds IMCE settings to the form.
 *
 * @see imce_form_linkit_profile_form_builder()
 */
function imce_form_linkit_profile_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Linkit\ProfileInterface $linkit_profile */
  $linkit_profile = $form_state->getFormObject()->getEntity();

  $form['imce'] = array(
    '#type' => 'details',
    '#title' => t('IMCE integration'),
    '#group' => 'additional_settings',
  );

  $form['imce']['imce_use'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable IMCE File Browser in the editor dialog.'),
    '#default_value' => $linkit_profile->getThirdPartySetting('imce', 'use', FALSE),
  );

  $scheme_options = \Drupal::service('stream_wrapper_manager')->getNames(StreamWrapperInterface::READ_VISIBLE);
  $form['imce']['imce_scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Scheme'),
    '#options' => $scheme_options,
    '#default_value' => $linkit_profile->getThirdPartySetting('imce', 'scheme', 'public'),
    '#states' => [
      'visible' => [
        ':input[name="imce_use"]' => ['checked' => TRUE],
      ],
    ],
  );

  $form['#entity_builders'][] = 'imce_form_linkit_profile_form_builder';
}

/**
 * Entity builder for the linkit profile form with imce options.
 *
 * @see imce_form_linkit_profile_form_alter().
 */
function imce_form_linkit_profile_form_builder($entity_type, ProfileInterface $linkit_profile, &$form, FormStateInterface $form_state) {
  $linkit_profile->setThirdPartySetting('imce', 'use', $form_state->getValue('imce_use'));
  $linkit_profile->setThirdPartySetting('imce', 'scheme', $form_state->getValue('imce_scheme'));
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for linkit_editor_dialog_form on
 * behalf of the 'imce' module.
 *
 * Adds a button to open the imce file browser if it is enabled.
 */
function imce_form_linkit_editor_dialog_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Linkit\ProfileInterface $linkit_profile */
  $linkit_profile = $form_state->getFormObject()->getLinkitProfile();

  if($linkit_profile->getThirdPartySetting('imce', 'use', FALSE)) {
    $form['imce-link'] = [
      '#type' => 'link',
      '#title' => t('Open IMCE file browser'),
      '#url' => Url::fromRoute('imce.page', [
        'scheme' => $linkit_profile->getThirdPartySetting('imce', 'scheme', 'public'),
      ]),
      '#options' => array(
        'query' => array(
          'sendto' => 'linkitImce.sendto',
        ),
      ),
      '#attributes' => [
        'class' => ['linkit-imce-open'],
      ],
      '#attached' => [
        'library' => [
          'linkit/linkit.imce'
        ],
      ],
      '#weight' => 1,
    ];
  }
}
