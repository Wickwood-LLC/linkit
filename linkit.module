<?php 

/**
 * @file
 * Main file for linkit module.
 * @todo Provide help
 */

/**
 * Implements hook_menu().
 * 
 * @todo Strings should be wrapped in t()
 */
function linkit_menu() {
  $items = array();

  $items['linkit/dashboard/%'] = array(
    'title' => 'Linkit',
    'description' => 'Dashboard',
    'page callback' => '_linkit_dashboard',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'theme callback' => '_linkit_dashboard_theme',
  );

  $items['linkit/autocomplete'] = array(
    'title' => 'Linkit autocomplete response function',
    'page callback' => '_linkit_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['linkit/geteditresult'] = array(
    'title' => 'Get search result styled link',
    'page callback' => 'linkit_search_styled_link',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/linkit'] = array(
    'title' => 'Linkit profiles',
    'description' => 'Manage internal linking and control what results are shown in the autocomplete search.',
    'page callback' => 'linkit_admin_page',
    'access arguments' => array('administer linkit'),
    'file' => 'linkit.admin.inc',
  );

  $items['admin/config/content/linkit/profile/add'] = array(
    'title' => 'Add new Linkit profile',
    'page callback' => 'linkit_admin_profile_page',
    'access arguments' => array('administer linkit'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
    'file' => 'linkit.admin.inc',
  );

  $items['admin/config/content/linkit/profile/%linkit_profile'] = array(
    'title callback' => 'linkit_admin_profile_title',
    'title arguments' => array('Edit', 5),
    'page callback' => 'linkit_admin_profile_page',
    'page arguments' => array(5),
    'access arguments' => array('administer linkit'),
    'file' => 'linkit.admin.inc',
  );

  $items['admin/config/content/linkit/profile/%linkit_profile/delete'] = array(
    'title' => 'Delete Linkit profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('linkit_admin_profile_delete', 5),
    'access arguments' => array('administer linkit'),
    'file' => 'linkit.admin.inc',
  );

  return $items;
}

/**
 * Load the profile object from the variable table in the database.
 *
 * @param $profile_name
 *   The profile ID.
 */
function linkit_profile_load($profile_name) {
  $profiles = variable_get('linkit_profiles', array());
  return isset($profiles[$profile_name]) ? $profiles[$profile_name] : FALSE;
}

/**
 * Return the theme name to be used when showing linkit dashboard
 */
function _linkit_dashboard_theme() {
  return variable_get('admin_theme', 'seven');
}

/**
 * Implements hook_permission().
 */
function linkit_permission() {
  return array(
    'administer linkit' => array(
      'title' => t('Administer Linkit'), 
    ),
  );
}

/**
 * Implements hook_theme().
 */
function linkit_theme($existing, $type, $theme, $path) {
  return array(
    'linkit_dashboard' => array(
      'variables' => array('form' => NULL),
      'template' => 'linkit-dashboard',
    ),
    'linkit_profile_assignment' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 */
function linkit_element_info_alter(&$types) {
  if (isset($types['text_format']['#pre_render']) && is_array($types['text_format']['#pre_render'])) {
    if (in_array('ckeditor_pre_render_text_format', $types['text_format']['#pre_render'])) {
      _linkit_add_settings('ckeditor');  
    }
  }
}

/**
 * Template preprocess function for theme_linkit_dashboard().
 */
function template_preprocess_linkit_dashboard(&$variables) {
  // Construct page title
  $variables['head_title']        = t('Linkit dashboard');
  $variables['head']              = drupal_get_html_head();
  $variables['help']              = theme('help');
  $variables['language']          = $GLOBALS['language'];
  $variables['language']->dir     = $GLOBALS['language']->direction ? 'rtl' : 'ltr';
  $variables['messages']          = isset($variables['show_messages']) ? theme('status_messages') : '';
  $variables['css']               = drupal_add_css();
  $variables['styles']            = drupal_get_css();
  $variables['scripts']           = drupal_get_js();
}

/**
 * Creates the dashboard.
 */
function _linkit_dashboard($editor) {
  module_invoke('admin_menu', 'suppress');
  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'linkit') . '/css/linkit.css');
  drupal_add_js(drupal_get_path('module', 'linkit') . '/betterautocomplete.js', array('group' => JS_LIBRARY));
  
  // Add JS
  static $defualt_settings_added = FALSE;
  
  // Add default settings
  if (!$defualt_settings_added) {
    $defualt_settings_added = TRUE;

    $settings = array(
      'linkit' => array('autocompletePath' => url('linkit/autocomplete', array('absolute' => TRUE))),
    );

    // Check if IMCE is enbled and accessable
    $imce = module_invoke('imce', 'access');
    if($imce) {
      $settings['linkit']['IMCEurl'] = url('imce', array('query' => array('app' => 'Linkit|sendto@Drupal.linkit.IMCECallback')));
    }

    drupal_add_js($settings, 'setting');
  }
  drupal_add_js(drupal_get_path('module', 'linkit') . '/linkit.js');

  switch ($editor) {
    case 'wysiwyg_tinymce':
      // Add JavaScript.
      drupal_add_js(wysiwyg_get_path('tinymce') . '/jscripts/tiny_mce/tiny_mce_popup.js');
      drupal_add_js(drupal_get_path('module', 'linkit') . '/editors/tinymce/linkit.js');
      break;

    case 'ckeditor':
    case 'wysiwyg_ckeditor':
      // Add JavaScript.
      drupal_add_js(drupal_get_path('module', 'linkit') . '/editors/ckeditor/linkitDialog.js');
      break;

    case 'fckeditor':
    case 'wysiwyg_fckeditor':
      // Add JavaScript.
      drupal_add_js(drupal_get_path('module', 'linkit') . '/editors/fckeditor/linkit/linkitDialog.js');
      break;
  }
  $form = drupal_get_form('_linkit_dashboard_form');
  print theme('linkit_dashboard', array('form' => render($form)));
}

/**
 * Autocomplete callback function.
 */
function _linkit_autocomplete($search = NULL) {

  // TODO: Security!
  $search = $_GET['s'];

  $url = parse_url($search);

  // Absolute URI
  if ($url['scheme']) {
    $results = array(_linkit_path_info($search));
  }
  else {
    $results = _linkit_autocomplete_search($search);
  }

  // TODO: This hook should be removed, right?
  // hook_linkit_load_plugins_alter() , let other modules change the results array
  drupal_alter('linkit_load_plugins', $results);

  drupal_json_output($results);
}

/**
 * Perform internal autocomplete search
 * Enter description here ...
 * @param $search The search string
 * @return $results An array with the result objects
 */
function _linkit_autocomplete_search($search) {
  $matches = array();
  if ($search) {
    // Load all plugins for this user from active profile
    $settings = _linkit_load_profile_settings();
    foreach (linkit_load_plugins(TRUE) AS $name => $plugin) {
      // Only call callbacks for plugins that is enabled in the profile for this user.
      if ($settings['enabled_plugins'][$name]) {
        // The function should exist, maybe it's better to just throw the error?
        if (function_exists($plugin['autocomplete callback'])) {
          $results = call_user_func($plugin['autocomplete callback'], $search, $settings);
          // TODO: Maybe validate the result?
          $matches = array_merge($matches, $results);
        }
      }
    }
  }
  return $matches;
}

/**
 * Get information about an url, whether it is internal or external,
 * the system path, in case there is any, etc.
 * 
 * @todo Flag for allowing relative paths, to scan absolute only.
 *
 * @param $url
 *   The url that should be scanned. 
 *
 * @return
 *   An associative array containing:
 *   - target: Either "internal" or "external".
 *   - url: The same as the argument $url, untouched
 *   - system_path: The drupal system path, e.g. "node/23" if target is
 *     internal and the path is valid.
 *   - alias: The alias to the path, if the system path has an alias.
 *   - parts: An associative array created by parse_url() containing url parts
 */
function _linkit_scan_url($url) {
  $path_info['url'] = $url;
  // Build the full URL, then take it apart
  $path_info['parts'] = parse_url($url);
  // URL to frontpage
  $root_url = substr(url('<front>', array('absolute' => TRUE)), 0, -1);

  // Internal URL
  if ($path_info['parts']['scheme'] && preg_match('~^' . $root_url . '($|/|\?|#)~', $url)) {
    $path_info['absolute'] = TRUE;
    $path_info['target'] = 'internal';
    // Look for path, construct result and send back
    // TODO: One line?
    // TODO: Does this work when Drupal is installed in a subdir? At another port?
    $path = trim($path_info['parts']['path'], '/');

    // Frontpage check
    if (empty($path)) {
      $path = variable_get('site_frontpage', 'node');
      $path_info['frontpage'] = TRUE;
    }
    $system_path = drupal_lookup_path('source', $path);
    $system_path = $system_path ? $system_path : $path;

    if ($system_path !== FALSE && drupal_valid_path($system_path)) {
      $path_info['system_path'] = $system_path;
      $path_info['alias'] = drupal_lookup_path('alias', $path);
    }
  }
  // External URL
  elseif ($path_info['parts']['scheme']) {
    $path_info['absolute'] = TRUE;
    $path_info['target'] = 'external';
  }
  // Internal path? No absolute URL given
  else {
    // For now, this is the simplest solution, change later if necessary
    return FALSE;
  }
  return $path_info;
}

/**
 * Retrieve information about a path. This method will iterate over Linkit
 * plugins to look for information about that path. Both internal and
 * external paths work.
 * 
 * @param $path
 *   The path, either like <http://example.com/path> or <path>
 *
 * @param $absolute
 * 	 True if $path is an absolute URL, false if relative to the Drupal root.
 *
 * @return
 *   An array with information about the path. It is intended to be passed
 *   directly to the autocomplete function, so that it can be rendered
 *   instantly upon the AJAX success. The array consists of:
 *   - title: The title of the result
 *   - description: The description of the result (may contain HTML)
 *   - path: The target path which will be inserted as the href in the link
 *   - alias: (optional) The alias to an internal path
 *   - class: A CSS class that will be added to the DOM result div
 *
 * @todo Implement the non absolute URL feature
 */
function _linkit_path_info($path, $absolute = TRUE) {
  if (!$path_info = _linkit_scan_url($path)) {
    return;
  }
  $parts = $path_info['parts'];
  $query_fragment = ($parts['query'] ? '?' . $parts['query'] : '') . ($parts['fragment'] ? '#' . $parts['fragment'] : '');

  // Let plugins review the path and optionally return a result
  $settings = _linkit_load_profile_settings();
  foreach (linkit_load_plugins() as $name => $plugin) {
    // TODO: Well, plugins should be able to give info about external paths as well?
    if ($plugin['path info callback'] && $result = call_user_func($plugin['path info callback'], $path_info, $settings)) {
      break;
    }
  }
  // A plugin gave a result
  if ($result) {
    if (!$result['class']) {
      $result['class'] = 'status-ok';
    }
    if (!$result['path'] && $path_info['target'] == 'internal') {
      // This is default target path for internal links, can be overridden by plugins.
      $result['path'] = $path_info['system_path'] . $query_fragment;
    }
    elseif (!$result['path'] && $path_info['target'] == 'external') {
      // This is default target path for external links, can be overridden by plugins.
      $result['path'] = $path_info['url'];
    }
    if ($path_info['frontpage']) {
      $result['path'] = '<front>' . $query_fragment;
    }
    // There is no alias for front, and alias shouldn't be altered by plugins
    elseif ($path_info['alias']) {
      $result['alias'] = $path_info['alias'];
    }
  }
  // No plugin results, internal, exists
  elseif ($path_info['system_path']) {
    $menu_item = menu_get_item($path_info['system_path']);
    $result = array(
      'path' => $path_info['system_path'],
      'alias' => $path_info['alias'],
      'title' => $menu_item['title'] ? check_plain($menu_item['title']) : check_plain($path_info['system_path']),
      'description' => 'This is an internal path.',
      'class' => 'status-ok',
    );
  }
  // No plugin results, internal, doesn't exist
  elseif ($path_info['target'] == 'internal') {
    $result = array(
      'path' => substr($path_info['parts']['path'], 1) . $query_fragment,
      'title' => 'Page not found',
      'description' => 'This page does not exist or you do not have access to it.',
      'class' => 'status-warning',
    );
  }
  // No plugin results, external
  elseif ($path_info['target'] == 'external') {
    $result = array(
      'title' => 'No information available',
      'description' => 'This is an external URL, but we don\'t know where it leads.',
      'path' => $path_info['url'],
      'class' => 'status-notice',
    );
  }
  return $result;
}

function _linkit_dashboard_form() {
  // Check if we have IMCE and access to it.
  $imce = module_invoke('imce', 'access');

  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search content'),
    '#description' => t('Start typing to find content. Use arrow keys to navigate up and down.') .'<br />'. t('You can also paste an URL here.'),
    '#maxlength' => 255,
    '#size' => 60,
    '#default_value' => '',
    '#weight' => -10,
  );

  if ($imce) {
    $form['file_browser'] = array(
      '#type' => 'button',
      '#value' => t('Open file browser'),
      '#name' => 'linkit-imce',
      '#id' => 'linkit-imce',
    '#weight' => -8,
    );
    // Add extra class to edit-link field when we can use IMCE
    $form['search']['#attributes'] = array('class' => array('with_imce'));
    // Add the imce buttom
    //$form['search']['#field_suffix'] = drupal_render($imcebutton);
  }
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Link text'),
    '#required' => TRUE,
    '#size' => 60,
    '#default_value' => '',
    '#weight' => -5,
  );
  $form['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Target path'),
    '#description' => t('Examples: <strong>node/123</strong>, <strong>http://www.example.com/path#anchor</strong>'),
    '#required' => TRUE,
    '#size' => 60,
    '#default_value' => '',
    '#weight' => -1,
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('The title attribute provides advisory information and appears as a tooltip when hovering the link. Not required.'),
    '#size' => 60,
    '#default_value' => '',
  );
  $form['insert'] = array(
    '#type' => 'button',
    '#value' => t('Insert link'),
    '#suffix' => '<a id="cancel" href="#">' . t('Cancel') . '</a>',
    '#weight' => 100,
  );

  return $form;
}

function linkit_wysiwyg_plugin($editor, $version) {
  $plugins = array();
  _linkit_add_settings('wysiwyg_' . $editor);

  switch ($editor) {
    case 'tinymce':      
      $plugins['linkit'] = array(
        'path' => drupal_get_path('module', 'linkit') . '/editors/tinymce',
        'filename' => 'editor_plugin.js',
        'buttons' => array('linkit' => t('Linkit')),
        'url' => 'http://drupal.org/project/linkit',
        'load' => TRUE,
      );
      break;
    case 'ckeditor':      
      // notice: Big "L" in the name here! important
      $plugins['Linkit'] = array(
        'path' => drupal_get_path('module', 'linkit') . '/editors/ckeditor',
        'buttons' => array('Linkit' => t('Linkit')),
        'url' => 'http://drupal.org/project/linkit',
        'load' => TRUE,
      );
      break;
    case 'fckeditor':      
      $plugins['linkit'] = array(
        'path' => drupal_get_path('module', 'linkit') . '/editors/fckeditor',
        'buttons' => array('linkit' => t('Linkit')),
        'url' => 'http://drupal.org/project/linkit',
        'load' => TRUE,
      );
    break;
  }

  return $plugins;
}

function _linkit_add_settings($editor) {
  static $editor_settings_added = array();
  static $global_settings_added = FALSE;

  if (!isset($editor_settings_added[$editor])) {
    $editor_settings_added[$editor] = TRUE;
    
    // Add popup url
    $settings = array(
      'linkit' => array('url' => array($editor => url('linkit/dashboard/' . $editor))),
    );
    drupal_add_js($settings, 'setting');
  }

  if (!$global_settings_added) {
    $global_settings_added = TRUE;

    // Add global settings for Linkit
    $settings = array(
      'linkit' => array(
        'modulepath' => drupal_get_path('module', 'linkit'),
      ),
    );
    drupal_add_js($settings, 'setting');
  }
}

/**
 * Implements hook_help().
 */
function linkit_help($path, $arg) {
  switch ($path) {
    case 'admin/config/content/linkit':
      $output = '<p>' . t('Help text here.') . '</p>';
      $output .= '<p>' . t('More help text.') . '</p>';
      return $output;
  }
}

/**
 * Determines if a profile with a given name exists.
 *
 * @param $profile_name
 *   The ID of the profile check.
 *
 * @return
 *   TRUE if the profile exists, FALSE otherwise.
 *
 * @see filter_format_load()
 */
function linkit_profile_exists($profile_name) {
  $profiles = variable_get('linkit_profiles', array());
  return isset($profiles[$profile_name]);
}

/**
 * Generate a page title.
 */
function linkit_admin_profile_title($op, $profile) {
  return $op . ' Linkit profile - ' . $profile['name']; // @TODO: Översättning här?
}

/**
 * Loads plugin files and returns active plugins for this user.
 *
 * @return An array with plugins enabled
 *
 * @todo Add parameter profile
 * @todo Add static flag variable since it only needs to be called once
 */
function linkit_load_plugins($include = FALSE) {
  static $installed_plugins;

  if (isset($installed_plugins)) {
    return $installed_plugins;
  }
  
  foreach (module_invoke_all('linkit_plugins') as $name => $plugin) {
    $installed_plugins[$name] = $plugin;
  }
  
  // Include plugin file.
  if ($include) {
    _linkit_include_plugins($installed_plugins);
  }

  return $installed_plugins;
}

/**
 * Includes all plugin files that are actived for the profile.
 */ 
function _linkit_include_plugins($plugins) {
  $settings = _linkit_load_profile_settings();
  
  foreach ($plugins AS $name => $plugin) {
    // Only include files for plugins that is enabled in the profile for this user.
    if ($settings['enabled_plugins'][$name]) {
      if ($plugin['file']) {
        if (file_exists(DRUPAL_ROOT . '/' . $plugin['file'])) {
          require_once DRUPAL_ROOT . '/' . $plugin['file'];
        }
        else {
          drupal_set_message(t('The plugin %plugin could not be loaded becasue the file %file was not found.', array('%plugin' => $name, '%file' => DRUPAL_ROOT . '/' . $plugin['file'])), 'error');
        }
      }
    }
  }
}

/**
 * Implements hook_linkit_plugins().
 */
function linkit_linkit_plugins() {
    // TODO: Wrap in t(), make awesome strings
    // TODO: Maybe settings form callback can be added here?
  $plugins['node'] = array(
    'title' => 'Node linking',
    'description' => 'Extends Linkit with the ability to find nodes in the autocomplete search',
    'file' => drupal_get_path('module', 'linkit') . '/plugins/linkit.node.inc',
    'autocomplete callback' => '_linkit_node_autocomplete',
    'path info callback' => '_linkit_node_path_info'
  );

  $plugins['user'] = array(
    'title' => 'User linking',
    'description' => 'Extends Linkit with the ability to find users in the autocomplete search',
    'file' => drupal_get_path('module', 'linkit') . '/plugins/linkit.user.inc',
    'autocomplete callback' => '_linkit_user_autocomplete',
  );

  $plugins['file'] = array(
    'title' => 'File linking',
    'description' => 'Extends Linkit with the ability to find files in the autocomplete search',
    'file' => drupal_get_path('module', 'linkit') . '/plugins/linkit.file.inc',
    'autocomplete callback' => '_linkit_file_autocomplete',
  );

  $plugins['taxonomy'] = array(
    'title' => 'Taxonomy linking',
    'description' => 'Extends Linkit with the ability to find terms in the autocomplete search',
    'file' => drupal_get_path('module', 'linkit') . '/plugins/linkit.taxonomy.inc',
    'autocomplete callback' => '_linkit_taxonomy_autocomplete',
  );

  $plugins['external'] = array(
    'title' => 'External linking',
    'description' => 'Extends Linkit with the ability to ping and retrieve information about external sites',
    'file' => drupal_get_path('module', 'linkit') . '/plugins/linkit.external.inc',
    'path info callback' => '_linkit_external_path_info'
  );

  return $plugins;
}

/**
 * Implementation of hook_image_default_styles
 * Enter description here ...
 */
function linkit_image_default_styles() {
  $styles = array();

  $styles['linkit_thumb'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 50, 'height' => 50, 'upscale' => 0),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}

/**
 * Get the "best" Linkit profile based on the users roles.
 */
function _linkit_load_profile_settings() {
  static $settings;
  global $user;
  
  if(isset($settings)) {
    return $settings;
  }

  // Get the role -> profile configuration
  $role_profile = variable_get('linkit_roles_profiles', array());

  // Get the profile settings
  $profile_settings = variable_get('linkit_profiles', array());

  $role_profile = array_reverse(array_filter($role_profile), TRUE);
  
  foreach($role_profile AS $rid => $profile_name) {
    if(isset($user->roles[$rid])) {
      $settings = $profile_settings[$profile_name];
      return $settings;
    }
  }
}
