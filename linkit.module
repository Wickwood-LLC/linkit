<?php
/**
 * @file
 * Main file for Linkit module.
 */

/**
 * Denotes that urls should be constructed without prepending a slash.
 */
define('LINKIT_URL_METHOD_NO_SLASH', 0);

/**
 * Denotes that urls should be constructed with a prepending slash.
 */
define('LINKIT_URL_METHOD_ADD_SLASH', 1);

/**
 * Defines which query string key Better autocomplete will just.
 */
define('LINKIT_BAC_QUERY_KEY', 's');

// Include the file with the field functions.
require_once dirname(__FILE__) . '/linkit.field.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function linkit_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/" . $plugin;
  }
  if ($module == 'linkit' && !empty($plugin)) {
    return "plugins/" . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_TYPE() to inform the plugin system that Linkit
 * owns Linkit plugin types.
 */
function linkit_ctools_plugin_type() {
  $plugins['linkit_search'] = array(
    'child plugins' => TRUE,
    'classes' => array('handler'),
  );
  $plugins['linkit_insert'] = array(
    'process' => array(
      'function' => 'linkit_insert_plugin_process',
    ),
  );
  $plugins['linkit_attribute'] = array();
  return $plugins;
}

/**
 * Provide defaults for insert pluings.
 */
function linkit_insert_plugin_process(&$plugin, $info) {
  // The plugin javascript can be just a filename or a full path,
  // in case it's just a filename, add the plugin path.
  if (!file_exists($plugin['javascript'])) {
    $plugin['javascript'] = $plugin['path'] . '/' . $plugin['javascript'];
  }
}

/**
 * Load a single Linkit profile.
 *
 * @param $name
 *   A string with the name of the profile to load.
 *
 * @return
 *   A LinkitProfile object or FALSE if no profile is found.
 */
function linkit_profile_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('linkit_profiles', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
  return FALSE;
}

/**
 * Load all Linkit profiles.
 *
 * @return
 *   An array with LinkitProfile objects.
 */
function linkit_profile_load_all() {
  ctools_include('export');
  $profiles = ctools_export_load_object('linkit_profiles');
  return $profiles;
}

/**
 * Alter how the LinkitProfile object is created.
 *
 * @return
 *   A LinkitProfile object.
 */
function linkit_profile_object_factory($schema, $data) {
  ctools_include('export');
  $export = $schema['export'];

  // Create the LinkitProfile object.
  $object = new $export['object'];

  // Call the unpack object that ctools provide to take care of unserialization
  // and potential joins.
  $object = _ctools_export_unpack_object($schema, $data, $object);

  // Call the profile init function.
  $object->init($object->data);
  return $object;
}

/**
 * Temporary saves the active profile. Active means that the user is working
 * with the profile in the dialog.
 *
 * @param string LinkitProfile $profile
 *   A LinkitProfile object.
 */
function linkit_set_active_profile(LinkitProfile $profile) {
  $active_profile = &drupal_static('linkit_active_profile');
  $active_profile = $profile;
}

/**
 * Get the currently active profile.
 *
 * @return
 *   A LinkitProfile object if there is one set.
 *
 * @see linkit_set_active_profile()
 */
function linkit_get_active_profile() {
  return drupal_static('linkit_active_profile');
}

/**
 * Fetch metadata for all Linkit search plugins.
 *
 * @return
 *   An array of arrays with information about all available Linkit search
 *   plugins.
 */
function linkit_search_plugin_load_all() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('linkit', 'linkit_search');
  // If you alter the plugin handler, be sure the new handler is registerd or
  // you include it in some other way.
  drupal_alter('linkit_search_plugins', $plugins);
  return $plugins;
}

/**
 * Fetch metadata for one Linkit search plugin by the given name.
 *
 * @param $plugin_name
 *   A string with the name of the plugin to load.
 *
 * @return
 *   An array with information about the search plugin.
 */
function linkit_search_plugin_load($plugin_name) {
  ctools_include('plugins');
  $plugin = ctools_get_plugins('linkit', 'linkit_search', $plugin_name);
  // If you alter the plugin handler, be sure the new handler is registerd or
  // you include it in some other way.
  drupal_alter('linkit_search_plugin', $plugin);
  return $plugin;
}

/**
 * Fetch metadata for all Linkit insert plugins.
 *
 * @return
 *   An array of arrays with information about all available insert plugins.
 */
function linkit_insert_plugin_load_all() {
  ctools_include('plugins');
  // Load all insert plugins.
  $plugins = ctools_get_plugins('linkit', 'linkit_insert');
  return $plugins;
}

/**
 * Fetch metadata for one Linkit insert plugin by the given name.
 *
 * @param $plugin_name
 *   A string with the name of the plugin to load.
 *
 * @return
 *   An array with information about the insert plugin.
 */
function linkit_insert_plugin_load($plugin_name) {
  ctools_include('plugins');
  // Load all insert plugins.
  $plugins = ctools_get_plugins('linkit', 'linkit_insert', $plugin_name);
  return $plugins;
}

/**
 * Fetch metadata for all Linkit attribute plugins.
 *
 * @return
 *   An array of arrays with information about all available attribute plugins.
 */
function linkit_attribute_plugin_load_all() {
  ctools_include('plugins');
  // Load all attribute plugins.
  $attributes = ctools_get_plugins('linkit', 'linkit_attribute');
  return $attributes;
}

function linkit_attribute_plugin_load($plugin_name) {
  ctools_include('plugins');
  // Load all insert plugins.
  $plugins = ctools_get_plugins('linkit', 'linkit_attribute', $plugin_name);
  return $plugins;
}

/**
 * Implements hook_entity_info_alter();
 *
 * Control which enteties that can be used by Linkit search pluings.
 * Other modules can easy implement this hook aswell and make their enteties
 * usable with Linkit or change directly in the the hook_entity_info().
 *
 * @param $entity_info
 *   The entity info array, keyed by entity name.
 *
 * @see hook_entity_info()
 */
function linkit_entity_info_alter(&$entity_info) {
  // An array of entity names that is allowed to be used in Linkit.
  $allowed = array('node', 'user', 'taxonomy_term', 'file');

  foreach ($allowed as $entity_name) {
    if (isset($entity_info[$entity_name])) {
      $entity_info[$entity_name]['linkit'] = TRUE;
    }
  }
}

/**
 * Implements hook_linkit_plugin_entities_alter().
 *
 * The default behavior for entities is that they will use the default entity
 * search plugin class, which will provide them with the basic methods they
 * need.
 *
 * Tho there is some search plugins that will extend those basic method with
 * more advanced once, therefor the handlers for those plugins will have to be
 * changed.
 *
 * @param $plugins
 *   An array of all search plugins processed within Linkit entity plugin.
 *
 * @TODO: Rename plugin files to linkit_serach-ENTITY.class.php
 */
function linkit_linkit_search_plugin_entities_alter(&$plugins) {
  $alter_plugins = array(
    'entity:node',
    'entity:user',
    'entity:taxonomy_term',
    'entity:file',
  );

  $path = drupal_get_path('module', 'linkit') . '/plugins/linkit_search';

  foreach ($alter_plugins as $plugin) {
    if (isset($plugins[$plugin])) {
      $handler = array(
        'class' => 'LinkitSearchPlugin' . drupal_ucfirst($plugins[$plugin]['entity_type']),
        'file' => 'linkit-search-' . $plugins[$plugin]['entity_type'] . '.class.php',
        'path' => $path,
      );
      $plugins[$plugin]['handler'] = $handler;
    }
  }
}

/**
 * Implements hook_theme().
 */
function linkit_theme($existing, $type, $theme, $path) {
  return array(
    'linkit_plugin_form_table' => array(
      'render element' => 'form',
      'file' => 'includes/theme.inc',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function linkit_menu_alter(&$items) {
  // Override the default titles that ctools export_ui sets.
  // This way there is less code compared to define this in the plugin array.
  $items['admin/config/content/linkit/add']['title'] = 'Add new profile';
  $items['admin/config/content/linkit/import']['title'] = 'Import profiles';

  // Make tabs instead of action links.
  $items['admin/config/content/linkit/add']['type'] = MENU_LOCAL_TASK;
  $items['admin/config/content/linkit/import']['type'] = MENU_LOCAL_TASK;
}

/**
 * Implements hook_module_implements_alter().
 *
 * @TODO: Document why we are doing this.
 * @see linkit_element_info_alter().
 */
function linkit_module_implements_alter(&$implementations, $hook){
  if ($hook == 'element_info_alter') {
    $group = $implementations['linkit'];
    unset($implementations['linkit']);
    $implementations['linkit'] = $group;
  }
}

/**
 * Implements hook_element_info_alter().
 */
function linkit_element_info_alter(&$types) {
  // Append a process function for the field integration.
  foreach (linkit_get_allowed_field_elements() as $element) {
    if (isset($types[$element])) {
      $types[$element]['#process'][] = 'linkit_process_field_element';
    }
  }
}

/**
 * Implements hook_library().
 */
function linkit_library() {
  $path = drupal_get_path('module', 'linkit');

  $common = array(
    'website' => 'http://drupal.org/project/linkit',
    'version' => '7.3',
  );

  // Linkit base
  $libraries['linkit_base'] = array(
    'title' => 'Linkit base',
    'js' => array(
      $path . '/js/linkit.js' => array('group' => JS_DEFAULT),
      $path . '/js/linkit.dialog.js' => array('group' => JS_DEFAULT),
      // Add global settings for Linkit.
      array(
        'type' => 'setting',
        'data' => array('linkit' => array('foo' => 'bar')),
      ),
    ),
    'css' => array(
      $path . '/css/linkit.css' => array('group' => CSS_DEFAULT),
    ),
    'dependencies' => array(
      array('system', 'ui.dialog'),
      array('system', 'drupal.collapse'),
      array('linkit', 'linkit_bac'),
    ),
  );

  // Linkit field ui script.
  $libraries['linkit_field'] = array(
    'title' => 'Linkit Field UI',
    'js' => array(
      $path . '/js/linkit.field.js' => array('group' => JS_DEFAULT),
    ),
    'dependencies' => array(
      array('linkit', 'linkit_base'),
    ),
  );

  foreach ($libraries as &$library) {
    $library += $common;
  }

  // Linkit BAC
  // @TODO: Move this out of Linkit.
  $libraries['linkit_bac'] = array(
    'website' => 'https://github.com/betamos/Better-Autocomplete',
    'version' => '1.0',
    'title' => 'Better autocomplete',
    'js' => array(
      $path . '/better-autocomplete/jquery.better-autocomplete.js' => array('group' => JS_LIBRARY),
      array(
        'type' => 'setting',
        // ___profile___ is just a placeholder.
        'data' => array('linkit' => array('autocompletePath' => url('linkit/autocomplete/___profile___', array('query' => array(LINKIT_BAC_QUERY_KEY => ''), 'absolute' => TRUE)))),
      ),
    ),
    'css' => array(
      $path . '/better-autocomplete/better-autocomplete.css' => array('group' => CSS_DEFAULT),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function linkit_menu() {
  $items = array();

  // @TODO: Document this.
  $items['linkit/dashboard/%linkit_profile'] = array(
    'title' => 'Linkit',
    'description' => 'Dashboard',
    'page callback' => '_linkit_dashboard',
    'page arguments' => array(2),
    'access callback' => TRUE, // @TODO: Tell users why TRUE.
    'type' => MENU_CALLBACK,
  );

  // @TODO: Document this.
  $items['linkit/autocomplete/%linkit_profile'] = array(
    'title' => 'Linkit autocomplete response function',
    'description' => 'Dashboard',
    'page callback' => '_linkit_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
};

/**
 * Creates the dialog dashboard.
 *
 * We don't call drupal_get_form() in the menu callback as we don't want to
 * return the rendered form, we just want to print it as it is.
 *
 * @param string $profile
 *   A LinkitProfile object.
 */
function _linkit_dashboard(LinkitProfile $profile) {
  // Set the active Linkit profile.
  linkit_set_active_profile($profile);
  // Get the dashboard form.
  $form = drupal_get_form('linkit_dashboard_form');
  print drupal_render($form);
  drupal_exit();
}

/**
 * Implements hook_form().
 */
function linkit_dashboard_form($form, &$form_state) {
  // Get the active Linkit profile.
  $profile = linkit_get_active_profile();

  $form['linkit_search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#maxlength' => 255,
    '#size' => 60,
    '#default_value' => '',
    '#weight' => -10,
    // @TODO: ATTACH BAC HERE
  );

  $form['linkit_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Target path'),
    '#required' => TRUE,
    '#maxlength' => NULL,
    '#size' => 60,
    '#default_value' => '',
    '#weight' => -1,
  );

  // If we have enabled attributes, lets put them inside a fieldset.
  if (count($profile->getAttributes())) {
    // Create the container fieldset.
    $form['linkit_attributes'] = array(
      '#type' => 'fieldset',
      '#title' => t('Attributes'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 10,
    );
    // Append the attributes info the fieldset.
    foreach ($profile->getAttributes() AS $name => $attribute) {
      // Add 'linkit_' prefix to ensure that is uniq.
      $form['linkit_attributes']['linkit_' . $name] = $attribute;
    }
  }

  $form['linkit_insert'] = array(
    '#type' => 'button',
    '#value' => t('Insert link'),
    '#suffix' => '<a id="linkit-cancel" href="#">' . t('Cancel') . '</a>',
    '#weight' => 100,
  );
  return $form;
}

/**
 *
 */
function _linkit_autocomplete($profile) {
  print drupal_json_output(array());
  drupal_exit();
}