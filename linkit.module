<?php 

/**
 * @file
 * Main file for linkit module.
 */

/**
 * Implements hook_menu().
 */
function linkit_menu() {
  $items = array();

  $items['linkit/dashboard/%'] = array(
    'title' => 'Linkit',
    'description' => 'Dashboard',
    'page callback' => 'linkit_dashboard_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'theme callback' => '_linkit_dashboard_theme',
  );

  $items['linkit/autocomplete'] = array(
    'title' => 'Link to node',
    'page callback' => 'linkit_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['linkit/geteditresult'] = array(
    'title' => 'Get search result styled link',
    'page callback' => 'linkit_search_styled_link',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/linkit'] = array(
    'title' => 'Linkit settings',
    'description' => 'Configure Linkit',
    'page callback' => 'linkit_admin_page',
    'access arguments' => array('administer linkit'),
    'file' => 'linkit.admin.inc',
  );

  $items['admin/config/content/linkit/profile/add'] = array(
    'title' => 'Add new Linkit profile',
    'page callback' => 'linkit_admin_profile_page',
    'access arguments' => array('administer linkit'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
    'file' => 'linkit.admin.inc',
  );

  $items['admin/config/content/linkit/profile/%linkit_profile'] = array(
    'title callback' => 'linkit_admin_profile_title',
    'title arguments' => array('Edit', 5),
    'page callback' => 'linkit_admin_profile_page',
    'page arguments' => array(5),
    'access arguments' => array('administer linkit'),
    'file' => 'linkit.admin.inc',
  );

  $items['admin/config/content/linkit/profile/%linkit_profile/delete'] = array(
    'title' => 'Delete Linkit profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('linkit_admin_profile_delete', 5),
    'access arguments' => array('administer linkit'),
    'file' => 'linkit.admin.inc',
  );

  return $items;
}

/**
 * Load the profile object from the variable table in the database.
 *
 * @param $profile_name
 *   The profile ID.
 */
function linkit_profile_load($profile_name) {
  $profiles = variable_get('linkit_profiles', array());
  return isset($profiles[$profile_name]) ? $profiles[$profile_name] : FALSE;
}

/**
 * Return the theme name to be used when showing linkit dashboard
 */
function _linkit_dashboard_theme() {
  return variable_get('admin_theme', 'seven');
}

/**
 * Implements hook_permission().
 */
function linkit_permission() {
  return array(
    'administer linkit' => array(
      'title' => t('Administer linkit settings'), 
    ),
  );
}

/**
 * Implements hook_theme().
 */
function linkit_theme($existing, $type, $theme, $path) {
  return array(
    'linkit_dashboard' => array(
      'variables' => array('form' => NULL),
      'template' => 'linkit-dashboard',
    ),
    'linkit_profile_assignment' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 */
function linkit_element_info_alter(&$types) {
  if (isset($types['text_format']['#pre_render']) && is_array($types['text_format']['#pre_render'])) {
    if (in_array('ckeditor_pre_render_text_format', $types['text_format']['#pre_render'])) {
      _linkit_add_settings('ckeditor');  
    }
  }
}

/**
 * Template preprocess function for theme_linkit_dashboard().
 */
function template_preprocess_linkit_dashboard(&$variables) {
  // Construct page title
  $variables['head_title']        = t('Linkit dashboard');
  $variables['head']              = drupal_get_html_head();
  $variables['help']              = theme('help');
  $variables['language']          = $GLOBALS['language'];
  $variables['language']->dir     = $GLOBALS['language']->direction ? 'rtl' : 'ltr';
  $variables['messages']          = isset($variables['show_messages']) ? theme('status_messages') : '';
  $variables['css']               = drupal_add_css();
  $variables['styles']            = drupal_get_css();
  $variables['scripts']           = drupal_get_js();
}

/**
 * Creates the dashboard.
 */
function linkit_dashboard_page($editor) {
  module_invoke('admin_menu', 'suppress');
  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'linkit') . '/css/linkit.css');
  drupal_add_js(drupal_get_path('module', 'linkit') . '/betterautocomplete.js', array('group' => JS_LIBRARY));
  
  // Add JS
  static $defualt_settings_added = FALSE;
  
  // Add default settings
  if (!$defualt_settings_added) {
    $defualt_settings_added = TRUE;

    $settings = array(
      'linkit' => array('ajaxcall' => url('linkit/geteditresult')),
    );

    // Check if we have IMCE and access to it.
    $imce = module_invoke('imce', 'access');
    if($imce) {
      $settings['linkit']['IMCEurl'] = url('imce', array('query' => array('app' => 'Linkit|url@edit-link--2')));
    }

    drupal_add_js($settings, 'setting');
  }
  drupal_add_js(drupal_get_path('module', 'linkit') . '/linkit.js');

  switch ($editor) {
    case 'wysiwyg_tinymce':
      // Add JavaScript.
      drupal_add_js(wysiwyg_get_path('tinymce') . '/jscripts/tiny_mce/tiny_mce_popup.js');
      drupal_add_js(drupal_get_path('module', 'linkit') . '/editors/tinymce/linkit.js');
      break;

    case 'ckeditor':
    case 'wysiwyg_ckeditor':
      // Add JavaScript.
      drupal_add_js(drupal_get_path('module', 'linkit') . '/editors/ckeditor/linkitDialog.js');
      break;

    case 'fckeditor':
    case 'wysiwyg_fckeditor':
      // Add JavaScript.
      drupal_add_js(drupal_get_path('module', 'linkit') . '/editors/fckeditor/linkit/linkitDialog.js');
      break;
  }
  $form = drupal_get_form('_linkit_form');
  print theme('linkit_dashboard', array('form' => render($form)));
}

/**
 * Autocomplete callback function.
 */
function linkit_autocomplete($search = NULL) {

  // TODO: Security!
  $search = $_GET['s'];

  $matches = array();
  if ($search) {
    // Load all plugins for this user from active profile
    // TODO: Add profile
    foreach (linkit_load_plugins() AS $name => $plugin) {
      if (function_exists($plugin['autocomplete callback'])) {
        $results = call_user_func($plugin['autocomplete callback'], $search);
        // TODO: Maybe validate the result?
        $matches = array_merge($matches, $results);
      }
    }
  }

  // hook_linkit_load_plugins_alter() , let other modules change the matches array
  drupal_alter('linkit_load_plugins', $matches);

  drupal_json_output($matches);
}

function linkit_search_styled_link() {
  drupal_add_http_header('Content-Type', 'text/plain; charset=utf-8');
  if (isset($_GET['string'])) {
    $string = check_plain($_GET['string']);
    $matches = module_invoke_all('linkit_get_search_styled_link', $string);
    
    echo (isset($matches[0]) ? $matches[0] : '');
  }
}

function _linkit_form() {
  // Check if we have IMCE and access to it.
  $imce = module_invoke('imce', 'access');

  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search content'),
    '#description' => t('Start typing to find content. Use arrow keys to navigate up and down.'),
    '#maxlength' => 255,
    '#size' => 60,
    '#default_value' => '',
    '#weight' => -10
  );

  if ($imce) {
    $imcebutton = array(
      '#type' => 'button',
      '#value' => t('Browse server'),
      '#name' => 'linkit-imce',
      '#id' => 'linkit-imce',
    );
    // Add extra class to edit-link field when we can use IMCE
    $form['search']['#attributes'] = array('class' => array('with_imce'));
    // Add the imce buttom
    $form['search']['#field_suffix'] = drupal_render($imcebutton);
  }
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Link text'),
    '#required' => TRUE,
    '#size' => 60,
    '#default_value' => '',
    '#weight' => -5
  );
  $form['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Target path'),
    '#description' => t('Both internal (this site) and external (other sites) paths work. Type or paste. <br /> For example <strong>node/123</strong> or <strong>http://www.example.com/path#anchor</strong>'),
    '#required' => TRUE,
    '#size' => 60,
    '#default_value' => '',
    '#weight' => -1
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('The title attirbute provides advisory information and appears as a tooltip when hovering the link. Not required.'),
    '#size' => 60,
    '#default_value' => '',
  );
  $form['insert'] = array(
    '#type' => 'button',
    '#value' => t('Insert'),
    '#suffix' => '<a id="cancel" href="#">' . t('Cancel') . '</a>',
    '#weight' => 100,
  );

  return $form;
}

function linkit_wysiwyg_plugin($editor, $version) {
  $plugins = array();
  _linkit_add_settings('wysiwyg_' . $editor);

  switch ($editor) {
    case 'tinymce':      
      $plugins['linkit'] = array(
        'path' => drupal_get_path('module', 'linkit') . '/editors/tinymce',
        'filename' => 'editor_plugin.js',
        'buttons' => array('linkit' => t('Linkit')),
        'url' => 'http://drupal.org/project/linkit',
        'load' => TRUE,
      );
      break;
    case 'ckeditor':      
      // notice: Big "L" in the name here! important
      $plugins['Linkit'] = array(
        'path' => drupal_get_path('module', 'linkit') . '/editors/ckeditor',
        'buttons' => array('Linkit' => t('Linkit')),
        'url' => 'http://drupal.org/project/linkit',
        'load' => TRUE,
      );
      break;
    case 'fckeditor':      
      $plugins['linkit'] = array(
        'path' => drupal_get_path('module', 'linkit') . '/editors/fckeditor',
        'buttons' => array('linkit' => t('Linkit')),
        'url' => 'http://drupal.org/project/linkit',
        'load' => TRUE,
      );
    break;
  }

  return $plugins;
}

function _linkit_add_settings($editor) {
  static $editor_settings_added = array();
  static $global_settings_added = FALSE;

  if (!isset($editor_settings_added[$editor])) {
    $editor_settings_added[$editor] = TRUE;
    
    // Add popup url
    $settings = array(
      'linkit' => array('url' => array($editor => url('linkit/dashboard/' . $editor))),
    );
    drupal_add_js($settings, 'setting');
  }

  if (!$global_settings_added) {
    $global_settings_added = TRUE;

    // Add global settings for Linkit
    $settings = array(
      'linkit' => array(
        'modulepath' => drupal_get_path('module', 'linkit'),
      ),
    );
    drupal_add_js($settings, 'setting');
  }
}

/**
 * Implements hook_help().
 */
function linkit_help($path, $arg) {
  switch ($path) {
    case 'admin/config/content/linkit':
      $output = '<p>' . t('Help text here.') . '</p>';
      $output .= '<p>' . t('More help text.') . '</p>';
      return $output;
  }
}

/**
 * Include linkit core .inc files.
 */
function linkit_include($file) {
  module_load_include('inc', 'linkit', "plugins/" . $file);
}

/**
 * Determines if a profile with a given name exists.
 *
 * @param $profile_name
 *   The ID of the profile check.
 *
 * @return
 *   TRUE if the profile exists, FALSE otherwise.
 *
 * @see filter_format_load()
 */
function linkit_profile_exists($profile_name) {
  $profiles = variable_get('linkit_profiles', array());
  return isset($profiles[$profile_name]);
}

/**
 * Generate a page title.
 */
function linkit_admin_profile_title($op, $profile) {
  return $op . ' Linkit profile - ' . $profile['name']; // @TODO:: Översättning här?
}

/**
 * Loads plugin files and returns active plugins for this user.
 * @return An array with plugins enabled
 * @todo Add parameter profile
 */
function linkit_load_plugins() {
  $enabled_plugins = array();
  foreach (module_invoke_all('linkit_plugins') as $name => $plugin) {
    // TODO: If this module should be loaded, add it to the list...
    $enabled_plugins[$name] = $plugin;
    if ($plugin['file']) {
      if (file_exists(DRUPAL_ROOT . '/' . $plugin['file'])) {
        require_once DRUPAL_ROOT . '/' . $plugin['file'];
      }
      else {
         drupal_set_message(t('The plugin %plugin could not be loaded becasue the file %file was not found.', array('%plugin' => $name, '%file' => DRUPAL_ROOT . '/' . $plugin['file'])), 'error');
      }
    }
  }
  return $enabled_plugins;
}

/**
 * Implements hook_linkit_plugins
 */
function linkit_linkit_plugins() {
    // TODO: Wrap in t(), make awesome strings
    // TODO: Maybe settings form callback can be added here?
  $plugins['node'] = array(
    'title' => 'Node linking',
    'description' => 'Extends Linkit with the ability to find nodes in the autocomplete search',
    'file' => drupal_get_path('module', 'linkit') . '/plugins/linkit.node.inc',
    'autocomplete callback' => '_linkit_node_autocomplete',
  );

  $plugins['user'] = array(
    // TODO: Wrap in t(), make awesome strings
    'title' => 'User linking',
    'description' => 'Extends Linkit with the ability to find users in the autocomplete search',
    'file' => drupal_get_path('module', 'linkit') . '/plugins/linkit.user.inc',
    'autocomplete callback' => '_linkit_user_autocomplete',
  );

  $plugins['file'] = array(
    'title' => 'File linking',
    'description' => 'Extends Linkit with the ability to find files in the autocomplete search',
    'file' => drupal_get_path('module', 'linkit') . '/plugins/linkit.file.inc',
    'autocomplete callback' => '_linkit_file_autocomplete',
  );

  $plugins['taxonomy'] = array(
    // TODO: Wrap in t(), make awesome strings
    'title' => 'Taxonomy linking',
    'description' => 'Extends Linkit with the ability to find terms in the autocomplete search',
    'file' => drupal_get_path('module', 'linkit') . '/plugins/linkit.taxonomy.inc',
    'autocomplete callback' => '_linkit_taxonomy_autocomplete',
  );

  return $plugins;
}

